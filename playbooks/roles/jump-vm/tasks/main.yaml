---

# SPDX-FileCopyrightText: 2021 Ericsson AB and others
#
# SPDX-License-Identifier: Apache-2.0

- name: get all running VMs
  virt:
    command: list_vms
    state: running
  register: running_vms

- name: shutdown existing jump VM
  virt:
    name: "{{ jumphost.name }}"
    command: destroy
  when:
    jumphost.name in running_vms.list_vms

- name: get all shutdown VMs
  virt:
    command: list_vms
    state: shutdown
  register: shutdown_vms

- name: undefine existing jump VM
  virt:
    name: "{{ jumphost.name }}"
    command: undefine
  when:
    jumphost.name in shutdown_vms.list_vms

- name: remove dhcp leases
  shell: |
    jq 'del( .[] | select(.domain == "{{ jumphost.name }}" or .hostname == "{{ jumphost.name }}"))' /var/lib/libvirt/dnsmasq/virbr0.{{ item }} > /tmp/{{ item }}.tmp
    mv /tmp/{{ item }}.tmp /var/lib/libvirt/dnsmasq/virbr0.{{ item }}
  with_items:
    - status
    - macs
  become: true
  when: deployment_type == 'k8s'

- name: clean workspace
  file:
    path: "{{ workspace }}"
    state: absent

- name: create workspace if it does not exist
  file:
    path: "{{ workspace }}"
    state: directory
    mode: '0755'

- name: create directory for base images
  file:
    path: "{{ images_path }}"
    state: directory
    mode: '0755'

- name: download Ubuntu image for jump VM
  get_url:
    url: https://cloud-images.ubuntu.com/bionic/current/bionic-server-cloudimg-amd64.img
    dest: "{{ images_path }}/bionic-server-cloudimg-amd64.img"
    force: false
    mode: '0666'

- name: create new VM image from base image
  command: "qemu-img create -f qcow2 -F qcow2 -o backing_file={{ images_path }}/bionic-server-cloudimg-amd64.img {{ workspace }}/{{ jumphost.name }}.qcow2 10G"

- name: render config files for jump VM from templates
  template:
    src: "{{ kuberef_root }}/playbooks/roles/jump-vm/templates/{{ item }}.j2"
    dest: "{{ workspace }}/{{ item }}"
    mode: 0644
  with_items:
    - network-config
    - user-data
    - meta-data

- name: create config drive
  command: "genisoimage -output {{ workspace }}/{{ jumphost.name }}-cidata.iso -volid cidata -joliet -rock \
            {{ workspace }}/user-data {{ workspace }}/meta-data \
            {{ workspace + '/network-config' if deployment_type == 'full' else '' }}"

# currently commented out because of portability issues between Centos and Ubuntu
# - name: setting root password for debugging
#   become: true
#   command: "virt-customize -a {{ workspace }}/{{ jumphost.name }}.qcow2 --root-password password:'root'"

- name: define jump VM
  command: "virt-install --connect qemu:///system --name {{ jumphost.name }} \
              --ram 8192 --vcpus=8 --os-type linux --os-variant ubuntu16.04 \
              --disk path={{ workspace }}/kuberef-jump.qcow2,format=qcow2 \
              --disk {{ workspace }}/kuberef-jump-cidata.iso,device=cdrom \
              --network network=default,model=virtio,mac='{{ jumphost.interfaces[engine.net_config[engine.public_network].interface].mac_address }}' \
              {{ '--network bridge=pxebr,model=rtl8139,mac=' + jumphost.interfaces[engine.net_config[engine.pxe_network].interface].mac_address if deployment_type == 'full' else '' }} \
              --import --noautoconsole"

- name: start jump VM
  virt:
    name: "{{ jumphost.name }}"
    state: running

- name: wait for ip to be visible
  shell: virsh domifaddr "{{ jumphost.name }}" --full | grep "{{ jumphost.interfaces[engine.net_config[engine.public_network].interface].mac_address }}" | awk '{print $4}' | tail -n 1
  register: ipblock
  retries: 30
  delay: 1
  until: ipblock.stdout != ""
  when: deployment_type == 'k8s'

- name: store ip
  set_fact:
    vm_ip: "{{ ipblock.stdout.split('/') }}"
  when: deployment_type == 'k8s'

- name: wait for VM to be reachable
  wait_for:
    host: "{{ ( vm_ip is defined and vm_ip.0 or '' ) if 'k8s' in deployment_type else jumphost.interfaces[idf.net_config[engine.pxe_network].interface].address | default('') }}"
    port: 22
